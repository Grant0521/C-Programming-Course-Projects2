/*
Write a void function SelectionSortDescendTrace() that takes an integer array and sorts the array into descending order. The function should use nested loops and output the array after each iteration of the outer loop, thus outputting the array N-1 times (where N is the size). Complete main() to read in a list of up to 10 positive integers (ending in -1) and then call the SelectionSortDescendTrace() function.

If the input is:

20 10 30 40 -1
then the output is:

40 10 30 20
40 30 10 20
40 30 20 10
*/



#include <iostream>

using namespace std;

// TODO: Write a void function SelectionSortDescendTrace() that takes
//       an integer array and the number of elements in the array as arguments,
//       and sorts the array into descending order.
void SelectionSortDescendTrace(int numbers[], int numElements) {
   int i = 0;
   int j = 0;
   int indexSmallest = 0;
   int temp = 0;
   
   for (i = 0; i < numElements - 1; ++i) {
      indexSmallest = i;
      for (j = i + 1; j < numElements; ++j) {
         if ( numbers[j] > numbers[indexSmallest] ) {
               indexSmallest = j;
         }
      }
   
      temp = numbers[i];
      numbers[i] = numbers[indexSmallest];
      numbers[indexSmallest] = temp;
      
      for (int k = 0; k < numElements - 1; k++) {
         cout << numbers[k] << " ";
      }
      cout << numbers[numElements - 1] << " " << endl;
   }
}


int main() {
   int input, i = 0;
   int numElements = 0;
   int numbers [10];

   cin >> input;
   while (input != -1) {
      numbers[i] = input;
      cin >> input;
      i++;
      numElements++;
   }
   SelectionSortDescendTrace(numbers, numElements);
   // TODO: Read in a list of up to 10 positive integers; stop when
   //       -1 is read. Then call SelectionSortDescendTrace() function.

  return 0;
}
